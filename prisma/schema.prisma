// Prisma schema for Listener

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  role      String   // 'dj1', 'dj2', 'listener'
  createdAt DateTime @default(now())

  ownedRooms Room[]     @relation("RoomOwner")
  sessions   Session[]
}

model Room {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  ownerId   String

  owner      User        @relation("RoomOwner", fields: [ownerId], references: [id])
  setEntries SetEntry[]
  sessions   Session[]

  @@index([ownerId])
}

model Track {
  id        String   @id @default(uuid())
  title     String
  artist    String
  bpm       Int?
  key       String?
  energy    Int?
  sourceURI String?
  createdAt DateTime @default(now())

  setEntries SetEntry[]
}

model SetEntry {
  id        String   @id @default(uuid())
  roomId    String
  trackId   String
  position  Int
  note      String?
  cuePoints Json?    // Stores cue points: {start, end, A, B} in seconds
  createdAt DateTime @default(now())

  room  Room  @relation(fields: [roomId], references: [id], onDelete: Cascade)
  track Track @relation(fields: [trackId], references: [id])

  @@unique([roomId, position])
  @@index([roomId])
  @@index([trackId])
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  roomId    String
  socketId  String?
  joinedAt  DateTime @default(now())
  leftAt    DateTime?

  user User @relation(fields: [userId], references: [id])
  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([roomId])
  @@index([socketId])
}
